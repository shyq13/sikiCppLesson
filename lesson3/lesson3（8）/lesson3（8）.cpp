#include <iostream>
#include <string>
//运行该项目时一定要将它设为启动项！！！
//运行该项目时一定要将它设为启动项！！！
//运行该项目时一定要将它设为启动项！！！
using namespace std;

int main() {
	//空指针和空类型指针
	//建议刚定义出指针的时候使用空指针，以免指针错误导致程序崩溃

	int a = 4;
	float b = 45.56;
	char c = 'c';
	bool d = true;
	string e = "Hello,world";
	
	//空指针
	int* p1 = 0;
	int* p2 = NULL;
	int* p3 = nullptr;
	//以上为定义空指针的三种方法
	//1.将指针定义为0
	//2.使用NULL表示这个指针是空的
	//3.使用nullptr表示这个指针是空的
	//其中，nullptr是专门为C++空指针而诞生的
	cout << "空指针p1的值是" << p1 << endl;
	cout << "空指针p2的值是" << p2 << endl;
	cout << "空指针p3的值是" << p3 << endl;
	//以上除提示语外输出的结果都为0000000000000000，表示这些指针是空的

	//空类型指针
	void* p4;    //定义了一个空类型指针，现在p4可以接受任意类型的指针
	p4 = &a;    //此处p4接受了int类型的地址
	void* p5;
	p5 = &b;
	void* p6;
	p6 = &c;
	void* p7;
	p7 = &d;
	//以上的空类型指针分别接受了整型、浮点类型、字符型和布尔类型变量的地址
	cout << "变量a所在的内存地址是" << p4 << endl;
	cout << "变量b所在的内存地址是" << p5 << endl;
	cout << "变量c所在的内存地址是" << p6 << endl;
	cout << "变量d所在的内存地址是" << p7 << endl;
	//输出各指针

	p4 = &e;    //由于p4是无类型指针，所以可以切换任意类型的内存地址
	//此处由int类型切换为了string类型
	cout << "变量e所在的内存地址是" << p4 << endl;
	//输出结果：变量e所在的内存地址是……（内存地址）
  //cout << "变量e的值是" << *p4 << endl;
	//注意，以上代码会报错！因为p4是无类型指针，所以不能用它来输出变量的值
	//如果一定要输出，可以使用以下方法：
	//强制类型转换为string
	cout << "e的值是" << *((string*)p4) << endl;
	//(string*)中的*为转换指针类型必须要有的符号
	//现在p4就是一个string类型的指针了
	(void*)p4;
	//现在p4又成为了无类型指针
	p4 = &b;
	cout << "修改类型且重新赋值后p4的值是" << p4 << endl;
	cout << "b变量的值是" << *((float*)p4) << endl;

	
	return 0;
}