#include <iostream>
//运行该项目时一定要将它设为启动项！！！
//运行该项目时一定要将它设为启动项！！！
//运行该项目时一定要将它设为启动项！！！
using namespace std;

int main() {
	//知识点：数组
	//数组的定义
	int a [5];  //此处定义了数组a，[]里的数字表示数组内的项数	
	char b[10];  //此处定义了数组b，数据类型为char，表示数组内只能存储char类型的数据
	float c[30];
	bool d[10];
	double e[10];
	short f[10];
	long g[10];
	
	//数组的初始化
	int a1[5] = { 1,2,3,4,5 };   //这是数组初始化的第一种方式：声明时初始化
	char b1[10] = {'a','b'};  //这是数组初始化第一种方式的变化版本：声明时初始化只定义少于项数的数据
	                          //后面的数据默认为'\0'（空字符）
	bool c1[] = {true,false,true,false,true,false};  //此处没有填写项数，编译器会自动匹配
  /*int d1 [4];
    d1 [4] = {1,2,3,4}   此处的声明和初始化是错误的，第一次声明后，初始化时就不用再写项数了*/
  /*a1 = e1;    此处的声明也是错误的，一个数组不能赋值给另一个数组*/
	
	//↑↑↑以上为旧版C的声明、初始化的方法，↓↓↓以下为新版C++的声明、初始化方法
	int newCpp[5]{1,2,3,4,5};

	//数组的访问
	float d1[5] = {1.1,2.2,3.3,4.4,5.5};   //首先定义一个数组
	cout << "第一个元素是：" << d1[0] << endl;  //输出数组的第一个元素
	cout << "第二个元素是：" << d1[1] << endl;  //输出数组的第二个元素
	cout << "第三个元素是：" << d1[2] << endl; //输出数组的第三个元素
	cout << "第四个元素是：" << d1[3] << endl;  //输出数组的第四个元素
	cout << "第五个元素是：" << d1[4] << endl;  //输出数组的第五个元素
  //cout << d1[5] << endl;  //输出数组的第六个元素，超出数组范围，编译器虽然不报错，但是得到的数据是错误的
	
	//以上的d1[数字]都是数组d1的索引，也叫作下标

	//修改数组的值
	d1[0] = 2.1;  //此处将d1数组的第一个值修改为了2.1
	cout << "修改后的第一个元素是：" << d1[0] << endl;  //输出修改后d1列表的第一个元素
	
	
	int stop;
	cin >> stop;
	return 0;
}