#include <iostream>
//运行该项目时一定要将它设为启动项！！！
//运行该项目时一定要将它设为启动项！！！
//运行该项目时一定要将它设为启动项！！！
using namespace std;

int main() {
	//判断下面的代码会输出什么
	int i;
	for (i = 0; i < 5; i++) {
		cout << i << endl;
		//这些代码将会输出：
		/*
		0
		1
		2
		3
		4
		*/
	}

	cout << '\n';
	cout << "-------------------------------------";
	cout << '\n';

	int j;
	for (j = 0; j < 11; j += 3)
		cout << j << endl;
	cout << endl << j << endl;
	//输出结果如下：
	/*
	0
	3
	6
	9

	12
	*/

	cout << '\n';
	cout << "-------------------------------------";
	cout << '\n';

	int k = 5;
	while (++k < 9)
		cout << k++ << endl;
	//输出结果：
	/*
	6
	8
	*/
	//为什么是这样呢？
	//看下面：
	
	cout << '\n';
	cout << "-------------------------------------";
	cout << '\n';

	int l = 9;
	int result = l++ + 1;
	cout << "result的值是" << result << endl;   //输出结果：result的值是10
	cout << "l的值是" << l << endl;    //输出结果：l的值是10

	cout << '\n';

	l = 9;
	result = ++l + 1;
	cout << "现在result的值是" << result << endl;   //输出结果：现在result的值是11
	cout << "现在l的值是" << l << endl;   //输出结果：现在l的值是10

	//为什么两次的代码看似一样，但是结果不同呢？
	//主要是这个区别：l++ 、 ++l
	/*
	使用l++：
	l++表示先使用l的值（9）进行表达式的运算，在进行自增
	如：
	int l = 9;
	int result = l++ + 1;
	运算过程：
	先运算l + 1，得到10，将10赋值给result，再使用原来的值（9）进行自增（++），得到10，赋值给l
	所以使用l++，两边的结果都是10
	*/
	/*
	使用++l：
	++l与l++的过程相反，先进行自增，再进行表达式的运算
	如：
	int l = 9;
	int result = ++l + 1;
	运算过程：
	先运算++l，使用原来的值（9）进行自增，得到10，将10赋值给l，再使用自增完的值（10）进行表达式的运算（+ 1），
	得到11，将值（11）赋值给result
	所以使用++l，需要进行赋值的变量是11，l是10
	*/

	cout << '\n';

	int m = 3;
	cout << "m的值是" << m++ << endl;
	//输出结果：m的值是3    为什么会出现这种情况？
	//因为cout语句也是一种表达式，执行这行代码时，会先输出，再自增
	m = 3;
	cout << "现在m的值是" << ++m << endl;
	//输出结果：现在m的值是4

	//以上为自增的一些小知识，同样，自减也是同理

	
	return 0;
}